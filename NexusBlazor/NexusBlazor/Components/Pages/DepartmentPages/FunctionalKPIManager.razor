@page "/department/functional_kpi"
@inject Manager manager
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>nexus | Functional KPI</PageTitle>
<div style="padding: 10px 20px 10px 30px;">
    <h3>Functional KPI Manager</h3>

    <div class="card p-3" style="background-color: transparent;">
        <h5>@(SelectedKPI?.FunctionalKpiId == 0 ? "Add New KPI" : "Edit KPI")</h5>

        <EditForm Model="@SelectedKPI" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">KPI Name</label>
                <InputText class="form-control" @bind-Value="SelectedKPI!.KpiName" />
                <ValidationMessage For="@(() => SelectedKPI.KpiName)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Description</label>
                <InputTextArea class="form-control" @bind-Value="SelectedKPI.KpiDescription" />
            </div>

            <div class="mb-3">
                <label class="form-label">Department</label>
                <InputText class="form-control" @bind-Value="SelectedKPI.KpiDepartment" />
                <ValidationMessage For="@(() => SelectedKPI.KpiDepartment)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Effective From</label>
                <InputNumber class="form-control" @bind-Value="SelectedKPI.KpiEffectiveFrom" />
            </div>

            <div class="d-flex gap-2">
                <button type="submit" class="btn btn-success">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="ResetForm">Cancel</button>
            </div>
        </EditForm>
    </div>

    <div class="mb-4">
        <table class="table table-bordered table-hover">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>KPI Name</th>
                    <th>Description</th>
                    <th>Department</th>
                    <th>Effective From</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var kpi in KPIs)
                {
                    <tr class="@((SelectedKPI?.FunctionalKpiId == kpi.FunctionalKpiId) ? "table-primary" : "")">
                        <td style="color: white">@kpi.FunctionalKpiId</td>
                        <td style="color: white">@kpi.KpiName</td>
                        <td style="color: white">@kpi.KpiDescription</td>
                        <td style="color: white">@kpi.KpiDepartment</td>
                        <td style="color: white">@kpi.KpiEffectiveFrom</td>
                        <td>
                            <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => Edit(kpi)">Edit</button>
                            <button class="btn btn-sm btn-outline-danger" @onclick="() => Delete(kpi)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<FunctionalKpi> KPIs = [];
    private FunctionalKpi SelectedKPI = new()
    {
        KpiName = string.Empty,
        KpiDepartment = "Engineering Design",
        KpiEffectiveFrom = DateTime.Now.Year
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadKPIs();
    }

    private async Task LoadKPIs()
    {
        KPIs = await manager.FunctionalKpiDB.GetAllAsync();
    }

    private void Edit(FunctionalKpi kpi)
    {
        SelectedKPI = new FunctionalKpi
        {
            FunctionalKpiId = kpi.FunctionalKpiId,
            KpiName = kpi.KpiName,
            KpiDescription = kpi.KpiDescription,
            KpiDepartment = kpi.KpiDepartment,
            KpiEffectiveFrom = kpi.KpiEffectiveFrom
        };
    }

    private async Task Delete(FunctionalKpi kpi)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this KPI?");
        if (!confirmed) return;

        await manager.FunctionalKpiDB.DeleteAsync(kpi);
        await LoadKPIs();
        ResetForm();
    }

    private async Task HandleSubmit()
    {
        if (SelectedKPI.FunctionalKpiId == 0)
        {
            await manager.FunctionalKpiDB.InsertAsync(SelectedKPI);
        }
        else
        {
            await manager.FunctionalKpiDB.UpdateAsync(SelectedKPI);
        }

        await LoadKPIs();
        ResetForm();
    }

    private void ResetForm()
    {
        SelectedKPI = new FunctionalKpi
        {
            KpiName = string.Empty,
            KpiDepartment = "Engineering Design",
            KpiEffectiveFrom = DateTime.Now.Year
        };
    }
}
