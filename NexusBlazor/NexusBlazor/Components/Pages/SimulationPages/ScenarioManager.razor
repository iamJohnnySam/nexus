@page "/simulation/scenario"
@inject Manager manager
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>nexus | Simulation Scenario | @CurrentProject.ProjectName</PageTitle>

<ProjectSelectionRowComponent Title="Simulation Scenario Manager" OnProjectChange="HandleProjectChange" />

<div style="padding: 10px 20px 10px 30px;">

    <div class="row">
        <div class="col-4 scrollable-area">
            <div class="mb-4">
                <table class="table table-bordered table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>ID</th>
                            <th>Project</th>
                            <th>Simulation Name</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var scenario in Scenarios)
                        {
                            <tr class="@((SelectedScenario?.SimulationScenarioId == scenario.SimulationScenarioId) ? "table-primary" : "")">
                                <td style="color: white">@scenario.SimulationScenarioId</td>
                                <td style="color: white">@Projects.FirstOrDefault(p => p.ProjectId == scenario.ProjectId)?.DesignCode</td>
                                <td style="color: white">@scenario.SimulationName</td>
                                <td>
                                    <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => Edit(scenario)">Edit</button>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => Delete(scenario)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="col">
            <div class="card p-3" style="background-color: transparent; border=none;">
                <h5>@(SelectedScenario?.SimulationScenarioId == 0 ? "Add New Scenario" : "Edit Scenario")</h5>

                <EditForm Model="@SelectedScenario" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label class="form-label">Project</label>
                        <InputSelect class="form-control" @bind-Value="SelectedScenario!.ProjectId" disabled=@true>
                            <option value="">-- Select Project --</option>
                            @foreach (var project in Projects)
                            {
                                <option value="@project.ProjectId">@project.ProjectName</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Simulation Name</label>
                        <InputText class="form-control" @bind-Value="SelectedScenario.SimulationName" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">XML Raw</label>
                        <InputTextArea class="form-control" @bind-Value="SelectedScenario.XMLFile" />
                    </div>

                    <hr />

                    <div class="row">
                        <div class="col">
                            <h4>Stations</h4>
                            <table>
                                <tr>
                                    <th>Name</th>
                                    <th>Count</th>
                                    <th>Controls</th>
                                </tr>
                                @foreach (KeyValuePair<int, int> keyValuePair in SelectedScenario.SimulationStationIds)
                                {
                                    <tr>
                                        <td>

                                        </td>
                                    </tr>
                                }
                            </table>
                        </div>
                        <div class="col">
                            <h4>Manipulators</h4>
                        </div>
                        <div class="col">
                            <h4>Readers</h4>
                        </div>
                    </div>

                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-success">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="ResetForm">Cancel</button>
                    </div>

                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private Project CurrentProject;
    private List<SimulationScenario> Scenarios = [];
    private List<Project> Projects = [];

    private SimulationScenario SelectedScenario = new()
    {
        XMLFile = string.Empty,
        SimulationName = "New Simulation"
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        CurrentProject = manager.LoginInfo.CurrentProject;
        Projects = await manager.ProjectDB.GetAllAsync();
        Scenarios = await manager.SimulationScenarioDB.GetByProjectId(CurrentProject.ProjectId);
        SelectedScenario = new SimulationScenario
        {
            XMLFile = string.Empty,
            SimulationName = "New Simulation",
            ProjectId = CurrentProject.ProjectId
        };
    }

    private void Edit(SimulationScenario scenario)
    {
        SelectedScenario = new SimulationScenario
        {
            SimulationScenarioId = scenario.SimulationScenarioId,
            SimulationName = scenario.SimulationName,
            ProjectId = scenario.ProjectId,
            XMLFile = scenario.XMLFile,
            LastThroughput = scenario.LastThroughput,
            SimulationStationIds = scenario.SimulationStationIds,
            SimulationManipulatorIds = scenario.SimulationManipulatorIds,
            SimulationReaderIds = scenario.SimulationReaderIds
        };
    }

    private async Task Delete(SimulationScenario scenario)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this scenario?");
        if (!confirmed) return;

        await manager.SimulationScenarioDB.DeleteAsync(scenario);
        await LoadData();
        ResetForm();
    }

    private async Task HandleSubmit()
    {
        if (SelectedScenario.SimulationScenarioId == 0)
        {
            await manager.SimulationScenarioDB.InsertAsync(SelectedScenario);
        }
        else
        {
            await manager.SimulationScenarioDB.UpdateAsync(SelectedScenario);
        }

        await LoadData();
        ResetForm();
    }

    private void ResetForm()
    {
        SelectedScenario = new SimulationScenario
        {
            XMLFile = string.Empty,
            SimulationName = "New Simulation"
        };
    }

    async void HandleProjectChange(string projectName)
    {
        await LoadData();
    }
}