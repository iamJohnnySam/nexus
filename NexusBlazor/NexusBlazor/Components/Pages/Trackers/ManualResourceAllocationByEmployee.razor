@page "/manual_resource_allocation_by_employee"
@attribute [Authorize]
@using DataModels.Tools
@using NexusBlazor.Components.Logic
@inject Manager manager
@rendermode InteractiveServer

<PageTitle>nexus | Resource Allocation (Manual)</PageTitle>

<div style="padding: 10px 20px 10px 20px;">
    <h1>Resource Allocations</h1>

    <table style="width: 100%; ">
        <tr style="border-bottom: 1px solid red;">
            @if (ResourceType == EManualResourceType.Employee)
            {
                <th>Project</th>
                <th>Project Code</th>
            }
            else if (ResourceType == EManualResourceType.Project)
            {
                <th>Employee</th>
                <th>Designation</th>
            }
            @for (int i = CurrentWeek; i < CurrentWeek + NumberOfWeeks; i++)
            {
                <th style=@cellStyle>
                    @if (i > 52)
                    {
                        thisYear = DateTime.Now.Year + 1;
                        thisWeek = i % 52;
                    }
                    else
                    {
                        thisYear = DateTime.Now.Year;
                        thisWeek = i;
                    }
                    Week @(thisWeek) (@CalendarLogic.GetFirstMondayOfWeek(DateTime.Today.Year, thisWeek).ToString("MM/dd"))
                </th>
            }
            <th>Comments</th>
        </tr>


        @if (ResourceType == EManualResourceType.Employee)
        {
            @foreach (Project project in ActiveProjects)
            {
                <tr>
                    <td>@project.ProjectName</td>
                    <td>@project.DesignCode</td>

                    @for (int i = CurrentWeek; i < CurrentWeek + NumberOfWeeks; i++)
                    {
                        <td>
                            <ManualResourceCell ResourceType=ResourceType Id="project.ProjectId" Week="i" Year="DateTime.Now.Year" />
                        </td>
                    }
                    <td>
                    </td>
                </tr>
            }
        }
        else if (ResourceType == EManualResourceType.Project)
        {
            @foreach (Employee employee in ActiveEmployees)
            {
                <tr>
                    <td>@employee.EmployeeShortName</td>
                    <td>@employee.EmployeeDesignation?.DesignationName</td>
                    @for (int i = CurrentWeek; i < CurrentWeek + NumberOfWeeks; i++)
                    {
                        <td>
                            @if(i > 52)
                            {
                                thisYear = DateTime.Now.Year + 1;
                                thisWeek = i % 52;
                            }
                            else
                            {
                                thisYear = DateTime.Now.Year;
                                thisWeek = i;
                            }

                            @if (employee.JoinDate <= CalendarLogic.GetFirstMondayOfWeek(thisYear, thisWeek) && (employee.LeaveDate == null || employee.LeaveDate >= CalendarLogic.GetFirstMondayOfWeek(thisYear, thisWeek)))
                            {
                                <ManualResourceCell ResourceType=ResourceType Id="employee.EmployeeId" Week="thisWeek" Year="thisYear" Projects="ActiveProjects" />
                            }
                            else
                            {
                                <span>N/A</span>
                            }
                        </td>
                    }
                    <td>
                    </td>
                </tr>
            }
        }



    </table>
</div>


@code {
    private int CurrentWeek { get; set; }
    private int NumberOfWeeks { get; set; } = 12;
    private EManualResourceType ResourceType = EManualResourceType.Project;

    private int thisYear = DateTime.Now.Year;
    private int thisWeek = 1;

    protected override void OnInitialized()
    {
        CurrentWeek = CalendarLogic.WeekOfYear(DateTime.Now);
        base.OnInitialized();
    }

    List<Employee> ActiveEmployees { get; set; } = [];
    List<Project> ActiveProjects { get; set; } = [];

    int cellWidth = 85;
    string cellStyle = "width: 85px;";

    protected override void OnParametersSet()
    {
        cellWidth = (95 * 16) / NumberOfWeeks;
        cellStyle = $"width: {cellWidth}px; ";
        if (ResourceType == EManualResourceType.Project)
        {
            ActiveEmployees = manager.EmployeeDB.GetAllActiveAsync().Result.OrderBy(p => p.EmployeeDesignation!.DesignationName).ThenByDescending(p => p.EmployeeGrade!.GradeScore).ToList();

        }
        ActiveProjects = manager.ProjectDB.GetAllAsync().Result.OrderByDescending(p => p.POStatus).ThenBy(p => p.DesignCode).ToList();
    }
}
