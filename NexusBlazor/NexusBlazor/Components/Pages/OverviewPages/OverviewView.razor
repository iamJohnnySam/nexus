@page "/overview"
@implements IDisposable
@attribute [Authorize]

@using DataModels.Tools
@using NexusBlazor.Components.Pages.Trackers

@inject Manager manager

@rendermode InteractiveServer

<PageTitle>nɛxus | Overview</PageTitle>

<div style="padding: 10px 20px 10px 20px;">
    <div class="row">
        <div class="col">
            <h3>Project Overview</h3>
        </div>
        <div class="col-2">
        </div>
        <div class="col-1"></div>
    </div>
    <br />
    @foreach(Project project in manager.ProjectDB.ActiveTracked)
    {
        <div class="row" style="padding-bottom:10px" @onclick="() => ProjectSelected(project)">
            <div class="col-3"><h4>@project.ProjectName</h4></div>
            <div class="col-3"><strong>@project.DesignCode | @project.ProjectCode (Owner: 
                    @if (project.PrimaryDesignerId == 0)
                    {
                        <span>Not Assigned</span>
                    }
                    else
                    {
                @manager.EmployeeDB.GetByIdAsync(project.PrimaryDesignerId).Result?.EmployeeShortName
                    }
                    )</strong></div>
            <div class="col">Pending Tasks</div>
            <div class="col-1">Week @Week Resources</div>
        </div>

        <div class="row">
            <div class="col-6">
                <MilestoneCell SelectedProject="project" OnMilestoneEdit="EditMilestone" />
                @if (SelectedProjectId == project.ProjectId)
                {
                    <div class="row">
                        <div class="col">
                            <div style="text-align:center; padding-top:10px;">
                                <InputText @bind-Value="NewMilestoneTitle" />
                            </div>
                        </div>
                        <div class="col-2">
                            <div style="text-align:center; padding-top:10px;"><button class="modern-button" @onclick="() => AddMilestone(project)">Add & Edit Milestone</button></div>
                        </div>
                    </div>
                }
            </div>
            <div class="col">
                <TaskItemsCell SelectedProject="project" OnTaskItemEdit="EditTaskItem" />
                @if (SelectedProjectId == project.ProjectId)
                {
                    <div style="text-align:center; padding-top:10px;">
                        <InputText @bind-Value="NewTaskTitle" />
                    </div>  
                }
            </div>
            <div class="col-1">
                <ManualResourceCell ResourceType="EManualResourceType.Employee" Id="project.ProjectId" Year="DateTime.Now.Year" Week="CalendarLogic.WeekOfYear(DateTime.Now)" />
            </div>
        </div>

        <hr />
    }
</div>

@if (ShowMilestoneOverlay)
{
    <MilestoneEditOverlay SelectedItem="SelectedMilestone" OnItemUpdate="ItemUpdated" />
}
@if (ShowTaskOverlay)
{
    <ParentTaskOverlay SelectedItem="SelectedTask" OnItemUpdate="ItemUpdated" />
}

@code {
    public int SelectedProjectId { get; set; } = 0;
    public Milestone SelectedMilestone { get; set; } = new();
    public TaskItem SelectedTask { get; set; } = new();

    public bool ShowMilestoneOverlay { get; set; } = false;
    public bool ShowTaskOverlay { get; set; } = false;

    private int Year { get; set; } = DateTime.Today.Year;
    private int Week { get; set; } = CalendarLogic.WeekOfYear(DateTime.Now);

    public string NewTaskTitle
    {
        get { return ""; }
        set
        {
            manager.TaskItemDB.InsertAsync(new TaskItem
            {
                Title = value,
                ProjectId = SelectedProjectId,
                ParentTaskId = 0,
                CreatedOn = DateTime.Now,
                Deadline = DateTime.Now.AddDays(1),
                IsCompleted = false
            }).Wait();
        }
    }

    public string NewMilestoneTitle
    {
        get { return ""; }
        set
        {
            manager.MilestoneDB.InsertAsync(new Milestone
            {
                MilestoneName = value,
                ProjectId = SelectedProjectId,
                PlannedDate = DateTime.Now.AddDays(7),
                IsCompleted = false,
                OnHold = false
            }).Wait();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Year = DateTime.Today.Year;
        Week = CalendarLogic.WeekOfYear(DateTime.Now);
        manager.ProjectDB.PropertyChanged += (_, __) => InvokeAsync(StateHasChanged);
        manager.MilestoneDB.PropertyChanged += (_, __) => InvokeAsync(StateHasChanged);
        manager.TaskItemDB.PropertyChanged += (_, __) => InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        manager.ProjectDB.PropertyChanged -= (_, __) => InvokeAsync(StateHasChanged);
        manager.MilestoneDB.PropertyChanged -= (_, __) => InvokeAsync(StateHasChanged);
        manager.TaskItemDB.PropertyChanged -= (_, __) => InvokeAsync(StateHasChanged);
    }

    private void EditMilestone(Milestone milestone)
    {
        SelectedMilestone = milestone;
        SelectedProjectId = milestone.ProjectId;
        ShowMilestoneOverlay = true;
        ShowTaskOverlay = false;
    }


    private void EditTaskItem(TaskItem task)
    {
        SelectedTask = task;
        SelectedProjectId = task.ProjectId;
        ShowMilestoneOverlay = false;
        ShowTaskOverlay = true;
    }

    private void ProjectSelected(Project project)
    {
        SelectedProjectId = project.ProjectId;
    }

    private void ItemUpdated()
    {
        ShowMilestoneOverlay = false;
        ShowTaskOverlay = false;
    }

    private void AddMilestone(Project project)
    {
        SelectedMilestone = new Milestone
        {
            ProjectId = project.ProjectId,
            MilestoneName = "",
            PlannedDate = DateTime.Now,
            IsCompleted = false,
            Comments = ""
        };
        SelectedProjectId = project.ProjectId;
        ShowMilestoneOverlay = true;
        ShowTaskOverlay = false;
    }
}
