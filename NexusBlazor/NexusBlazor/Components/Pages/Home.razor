@page "/"
@inject Manager manager
@inject LoginInformation LoginInfo
@inject SqliteLogger Logger
@inject IHttpContextAccessor HttpContextAccessor
@inject AuthenticationStateProvider AuthStateProvider
@rendermode InteractiveServer

<PageTitle>nexus by iamJohnnySam</PageTitle>
<section class="hero" id="home">
        <h1>Welcome to nɛxus</h1>
    </section>

<AuthorizeView>
    <Authorized>
        <section class="projects" id="projects">
            @if (manager.ProjectDB.AllItems == null)
            {
                <div class="project-card">
                    <div class="project-title">Loading Projects...</div>
                    <div class="project-desc">...</div>
                </div>
            }
            else if (manager.ProjectDB.AllItems.Count == 0)
            {
                <div class="project-card">
                    <div class="project-title">NO PROJECTS AVAILABLE</div>
                    <div class="project-desc">...</div>
                </div>
            }
            else
            {
                @foreach (var project in manager.ProjectDB.AllItems)
                {
                    <ProjectCardComponent ThisProject=project />
                }
            }
        </section>
    </Authorized>
</AuthorizeView>


@code {

    public Employee? LoggedInEmployee { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var sessionId = Guid.NewGuid().ToString();
        var user = HttpContextAccessor.HttpContext?.User?.Identity?.Name ?? "Anonymous";
        Logger.SetSessionContext(sessionId, user);
        Logger.InfoAsync("Session started", interaction: "Program startup");

        LoggedInEmployee = await Helpers.GetCurrentEmployee(manager, LoginInfo, AuthStateProvider);
        manager.ProjectDB.PropertyChanged += (_, __) => InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        manager.ProjectDB.PropertyChanged -= (_, __) => InvokeAsync(StateHasChanged);
    }

}