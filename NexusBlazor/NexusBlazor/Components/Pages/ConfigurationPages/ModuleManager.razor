@page "/configuration/module"
@using DataModels.Tools
@inject Manager manager
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>nexus | Module</PageTitle>
<div style="padding: 10px 20px 10px 30px;">
    <h3>Product Module Manager</h3>

    <!-- Top Section: Table -->
    <!-- Bottom Section: Form -->
    <div class="card p-3" style="background-color: transparent;">
        <h5>@(SelectedModule?.ModuleId == 0 ? "Add New Module" : "Edit Module")</h5>

        <EditForm Model="@SelectedModule" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">Module Name</label>
                <InputText class="form-control" @bind-Value="SelectedModule.ModuleName" />
                <ValidationMessage For="@(() => SelectedModule.ModuleName)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Module Type</label>
                <InputSelect class="form-control" @bind-Value="SelectedModule.ModuleType">
                    @foreach (var type in Enum.GetValues(typeof(EModuleType)))
                    {
                        <option value="@type">@type</option>
                    }
                </InputSelect>
            </div>

            <div class="mb-3">
                <label class="form-label">Rank</label>
                <InputNumber class="form-control" @bind-Value="SelectedModule.Rank" />
                <ValidationMessage For="@(() => SelectedModule.Rank)" />
            </div>

            <div class="d-flex gap-2">
                <button type="submit" class="btn btn-success">Save</button>
                <button type="button" class="btn btn-secondary" @onclick="ResetForm">Cancel</button>
            </div>
        </EditForm>
    </div>

    <div class="mb-4">
        <table class="table table-bordered table-hover">
            <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>Module Name</th>
                    <th>Module Type</th>
                    <th>Rank</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var module in Modules)
                {
                    <tr class="@((SelectedModule?.ModuleId == module.ModuleId) ? "table-primary" : "")">
                        <td style="color: white">@module.ModuleId</td>
                        <td style="color: white">@module.ModuleName</td>
                        <td style="color: white">@module.ModuleType.ToString()</td>
                        <td style="color: white">@module.Rank</td>
                        <td>
                            <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => Edit(module)">Edit</button>
                            <button class="btn btn-sm btn-outline-danger" @onclick="() => Delete(module)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    private List<ProductModule> Modules = [];
    private ProductModule SelectedModule = new()
    {
        ModuleName = string.Empty
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadModules();
    }

    private async Task LoadModules()
    {
        Modules = await manager.ProductModuleDB.GetAllSortedAsync();
    }

    private void Edit(ProductModule module)
    {
        SelectedModule = new ProductModule
        {
            ModuleId = module.ModuleId,
            ModuleName = module.ModuleName,
            ModuleType = module.ModuleType,
            Rank = module.Rank
        };
    }

    private async Task Delete(ProductModule module)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete '{module.ModuleName}'?");
        if (!confirmed) return;

        await manager.ProductModuleDB.DeleteAsync(module);
        await LoadModules();
        ResetForm();
    }

    private async Task HandleSubmit()
    {
        if (SelectedModule.ModuleId == 0)
        {
            await manager.ProductModuleDB.InsertAsync(SelectedModule);
        }
        else
        {
            await manager.ProductModuleDB.UpdateAsync(SelectedModule);
        }

        await LoadModules();
        ResetForm();
    }

    private void ResetForm()
    {
        SelectedModule = new ProductModule
        {
            ModuleName = string.Empty
        };
    }
}
