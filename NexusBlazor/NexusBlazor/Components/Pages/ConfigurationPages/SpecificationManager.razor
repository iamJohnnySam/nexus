@page "/configuration/specification"
@attribute [Authorize]
@inject Manager manager
@inject IJSRuntime JS
@rendermode InteractiveServer

<PageTitle>nexus | Specification</PageTitle>
<div style="padding: 10px 20px 10px 30px;">
    <h3>Specification Manager</h3>

    <div class="row">
        <div class="col scrollable-area-tall">
            <div class="mb-4 mt-4">
                <table class="table table-bordered table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>ID</th>
                            <th>Product Module</th>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Rank</th>

                            <th>Configuration Options</th>
                            <th>Default</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var spec in Specifications)
                        {
                            <tr class="@((SelectedSpecification?.SpecificationId == spec.SpecificationId) ? "table-primary" : "")">
                                <td style="color: white">@spec.SpecificationId</td>
                                <td style="color: white">@spec.ProductModule?.ModuleName</td>
                                <td style="color: white">@spec.SpecificationName</td>
                                <td style="color: white">@spec.SpecificationDescription</td>
                                <td style="color: white">
                                    @if(spec.Rank == 0)
                                    {
                                        <span style="color:red;">@spec.Rank</span>
                                    }
                                    else
                                    {
                                        @spec.Rank
                                    }
                                </td>

                                <td style="color: white">@spec.ConfigurationOptions</td>
                                <td style="color: white">@spec.DefaultOption</td>
                                <td>
                                    <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => Edit(spec)">Edit</button>
                                    <button class="btn btn-sm btn-outline-danger" @onclick="() => Delete(spec)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="col-4">
            <div class="card p-3" style="background-color: transparent;">
                <h5>@(SelectedSpecification?.SpecificationId == 0 ? "Add New Specification" : "Edit Specification")</h5>

                <EditForm Model="@SelectedSpecification" OnValidSubmit="HandleSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label class="form-label">Product Module</label>
                        <InputSelect class="form-control" @bind-Value="SelectedSpecification!.ProductModuleId">
                            <option value=0>-- Select Module --</option>
                            @foreach (var module in ProductModules)
                            {
                                <option value="@module.ModuleId">@module.ModuleName</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => SelectedSpecification.ProductModuleId)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Specification Name</label>
                        <InputText class="form-control" @bind-Value="SelectedSpecification.SpecificationName" />
                        <ValidationMessage For="@(() => SelectedSpecification.SpecificationName)" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <InputText class="form-control" @bind-Value="SelectedSpecification.SpecificationDescription" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Rank</label>
                        <InputNumber class="form-control" @bind-Value="SelectedSpecification.Rank" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Configuration Options</label>
                        <InputText class="form-control" @bind-Value="SelectedSpecification.ConfigurationOptions" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Default Option</label>
                        <InputText class="form-control" @bind-Value="SelectedSpecification.DefaultOption" />
                    </div>

                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-success">Save</button>
                        <button type="button" class="btn btn-secondary" @onclick="ResetForm">Cancel</button>
                    </div>
                </EditForm>
            </div>
            <div>
                <br />
                <h4>Rank Guide</h4>
                <ul>
                    <li>1: Substrate Related Information</li>
                    <li>10: Performance Information</li>
                    <li>30: Location Information</li>
                    <li></li>
                    <li>50: Optional Items</li>
                    <li></li>
                    <li></li>
                    <li>100: Paint Codes and Surface Finishing</li>
                    <li>200: Maintenance</li>
                    <li>500: Customer Approvals</li>
                </ul>
            </div>
        </div>
    </div>

    

    
</div>

@code {
    int LastSelectedProductModuleId = 0;

    private List<Specification> Specifications = [];
    private List<ProductModule> ProductModules = [];
    private Specification SelectedSpecification = new()
    {
        SpecificationName = string.Empty
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        Specifications = await manager.SpecificationDB.GetAllAsync();
        ProductModules = await manager.ProductModuleDB.GetAllAsync();
    }

    private void Edit(Specification spec)
    {
        SelectedSpecification = new Specification
        {
            SpecificationId = spec.SpecificationId,
            SpecificationName = spec.SpecificationName,
            SpecificationDescription = spec.SpecificationDescription,
            ProductModuleId = spec.ProductModuleId,
            ConfigurationOptions = spec.ConfigurationOptions,
            DefaultOption = spec.DefaultOption,
            Rank = spec.Rank
        };
    }

    private async Task Delete(Specification spec)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this specification?");
        if (!confirmed) return;

        await manager.SpecificationDB.DeleteAsync(spec);
        await LoadData();
        ResetForm();
    }

    private async Task HandleSubmit()
    {
        if (SelectedSpecification.SpecificationId == 0)
        {
            await manager.SpecificationDB.InsertAsync(SelectedSpecification);
        }
        else
        {
            await manager.SpecificationDB.UpdateAsync(SelectedSpecification);
        }
        LastSelectedProductModuleId = SelectedSpecification.ProductModuleId;

        await LoadData();
        ResetForm();
    }

    private void ResetForm()
    {
        SelectedSpecification = new Specification
        {
            ProductModuleId = LastSelectedProductModuleId,
            SpecificationName = string.Empty,
            SpecificationDescription = string.Empty,
            ConfigurationOptions = string.Empty
        };
    }
}
